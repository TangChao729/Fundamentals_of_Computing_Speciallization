# https://py2.codeskulptor.org/#user48_FRKCWpRX2y_30.py

"""
Clone of 2048 game.
"""

import poc_2048_gui
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Function that merges a single row or column in 2048.
    """
    # declare a few pre-set
    input_list = list(line)
    output_list = []
    helper_list = []
    helper_index = 0
    helper_index2 = 0 
    
    # filter out zero from input list
    list_len = len(input_list) #should always be 4
    
    # create empty list with aadequent elements
    for ite in range(list_len):
        helper_list.append(0)
        output_list.append(0)
    
    # shift none zero value to left of list
    for ite in range(list_len):
        if input_list[ite] != 0:
            helper_list[helper_index] = input_list[ite]
            helper_index += 1
    
    # add first pairs of number
    for ite in range(list_len - 1):
        if helper_list[ite] == helper_list[ite + 1]:

            helper_list[ite] = helper_list[ite] + helper_list[ite + 1]
            helper_list[ite+1] = 0
    
    # shift none zero value to left of list again after add
    for ite in range(list_len):
        if helper_list[ite] != 0:
            output_list[helper_index2] = helper_list[ite]
            helper_index2 += 1
            
    return output_list

class TwentyFortyEight:
    """
    Class to run the game logic.
    """
    
    def __init__(self, grid_height, grid_width):
        # set grid perimeters
        self._grid_height = grid_height
        self._grid_width = grid_width
        
        # computing initial tiles in one direction
        up_ini_tiles = []
        down_ini_tiles = []
        left_ini_tiles = []
        right_ini_tiles = []        
        helper = []

        
        # compute up_ini_tiles
        for dummy_num in range(self._grid_width):
            helper.append(0)
            helper.append(dummy_num)
            up_ini_tiles.append(helper)
            helper = []
        
        # compute down_ini_tiles
        for dummy_num in range(self._grid_width):
            helper.append(self._grid_height - 1)
            helper.append(dummy_num)
            down_ini_tiles.append(helper)
            helper = []
        
        # compute up_ini_tiles
        for dummy_num in range(self._grid_height):
            helper.append(dummy_num)
            helper.append(0)            
            left_ini_tiles.append(helper)
            helper = []
        
        # compute up_ini_tiles
        for dummy_num in range(self._grid_height):
            helper.append(dummy_num)
            helper.append(self._grid_width - 1)            
            right_ini_tiles.append(helper)
            helper = []    
        
        # combine dictionary
        self._direction_dict = dict([(UP, up_ini_tiles),
                               (DOWN, down_ini_tiles),
                               (LEFT, left_ini_tiles),
                               (RIGHT, right_ini_tiles)])
        
        # set limits for the use of stpes
        self._limits = {UP : self._grid_height,
                        DOWN :self._grid_height,
                        LEFT : self._grid_width,
                        RIGHT : self._grid_width}
        # inital the game
        self.reset()

    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        # create a target grid with zeros
        self._grid = [[0 for dummy_num in range(self._grid_width)]
                           for dummy_num in range(self._grid_height)]
        
        # create two new tiles at start of game
        self.new_tile()
        self.new_tile()


    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # return a grid-like string 
        string = '\n'.join([str(row) for row in self._grid])
        
        return string
    
    def get_grid_height(self):
        """
        Get the height of the board.
        """
        # return grid height
        return self._grid_height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        # return grid width
        return self._grid_width
    
    def get_lists(self, start_cell, direction, num_steps):
        """
        Function that iterates through the cells in a grid
        in a linear direction

        Both start_cell is a tuple(row, col) denoting the
        starting cell

        direction is a tuple that contains difference between
        consecutive cells in the traversal
        """
        
        # copied from traverse_grid provided
        # mod to append list instead of showing each result
        
        input_list = []
        
        for step in range(num_steps):
            row = start_cell[0] + step * direction[0]
            col = start_cell[1] + step * direction[1]
            #print "Processing cell", (row, col), 
            #print "with value", self._grid[row][col]
            input_list.append(self._grid[row][col])
        return input_list
    
    def rewrite_lists(self, start_cell, direction, num_steps, merged_list):
        """
        Function that iterates through the cells in a grid
        in a linear direction

        Both start_cell is a tuple(row, col) denoting the
        starting cell

        direction is a tuple that contains difference between
        consecutive cells in the traversal
        """
        
        # same as above but modified to rewrite back number to original list
        
        for step in range(num_steps):
            row = start_cell[0] + step * direction[0]
            col = start_cell[1] + step * direction[1]
            #print "Processing cell", (row, col), 
            #print "with value", self._grid[row][col]
            self.set_tile(row, col, merged_list[step])
           
        
    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        # set merged (determinator) as False. meaning no need to add new tile
        merged = False
        # get initial tiles pos for certain direction from dictionery
        first_tiles = self._direction_dict[direction]
        # get max steps (grid height)
        steps = self._limits[direction]
        
        # iterate one-direction's each col/row, input list is from the first cell, to last cell
        # use the input list, and merged function (outside class), to generate new list
        # if new list is same to old list, set merged determinator as False, meaning no need to add new tile
        # if new is differ to old, set merged to true, meaning new tile required
        for dummy_num in first_tiles:
            input_list = self.get_lists(dummy_num, OFFSETS[direction], steps)
            merged_list = merge(input_list)
            self.rewrite_lists(dummy_num, OFFSETS[direction], steps, merged_list)
            if merged_list != input_list:
                merged = True
        # determine if list changed, if not, no action, if yes, new tile
        if merged:
            self.new_tile()
            merged = False
#		 below is for testing use
#        print "the grid now looks like:"
#        print '\n'.join([str(row) for row in self._grid])
#        print 
            
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        
        # generate random row & col number 
        random_row_number = random.randrange(0, self._grid_height)
        random_col_number = random.randrange(0, self._grid_width)
        
        # generate new rol col number if repeated, use while instead of if
        while self._grid[random_row_number][random_col_number] != 0:
            random_row_number = random.randrange(0, self._grid_height)
            random_col_number = random.randrange(0, self._grid_width)
        
        # generate tile value list (90% of 2, 10% of 4)
        random_val = random.randrange(0,10)
        if random_val == 9:
            self.set_tile(random_row_number, random_col_number, 4)
        else:
            self.set_tile(random_row_number, random_col_number, 2)

        

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        # replace with your code
        self._grid[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        # replace with your code
        return self._grid[row][col]


poc_2048_gui.run_gui(TwentyFortyEight(4, 4))

